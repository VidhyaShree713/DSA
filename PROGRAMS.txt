1.Given an array of integers and a target sum, return indices of the two numbers that add up to the target.

#include <stdio.h>

int main() {
    int size, target;
    printf("Enter size: ");
    scanf("%d", &size);

    int arr[size];
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Enter target sum: ");
    scanf("%d", &target);

    for (int i = 0; i < size; i++) {
        for (int j = i + 1; j < size; j++) {
            if (arr[i] + arr[j] == target) {
                printf("%d %d\n", i, j);
            }
        }
    }

    return 0;
}

2.Implement binary search to find the index of a target element in a sorted array.
#include <stdio.h>

int main() {
    int size, target;
    printf("Enter size: ");
    scanf("%d", &size);

    int arr[size];
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Enter target: ");
    scanf("%d", &target);

    int low = 0, high = size - 1, mid, found = 0;

    while (low <= high) {
        mid = (low + high) / 2;
        if (arr[mid] == target) {
            printf("Found at index %d\n", mid);
            found = 1;
            break;
        } else if (arr[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    if (!found) {
        printf("Not found\n");
    }

    return 0;
}
 
3.Write a function to check if two strings are anagrams of each other.
#include <stdio.h>
#include <string.h>

void sort(char *str) {
    int n = strlen(str);
    char temp;
    for (int i = 0; i < n-1; i++) {
        for (int j = i+1; j < n; j++) {
            if (str[i] > str[j]) {
                temp = str[i];
                str[i] = str[j];
                str[j] = temp;
            }
        }
    }
}

int main() {
    char str1[100], str2[100];
    scanf("%s", str1);
    scanf("%s", str2);

    if (strlen(str1) != strlen(str2)) {
        printf("Not anagram\n");
    } else {
        sort(str1);
        sort(str2);
        if (strcmp(str1, str2) == 0) {
            printf("Anagram\n");
        } else {
            printf("Not anagram\n");
        }
    }

    return 0;
}

4.Given a string, find the length of the longest substring without repeating characters.

#include <stdio.h>
#include <string.h>

int isUnique(char *str, int start, int end) {
    int visited[256] = {0};
    for (int i = start; i <= end; i++) {
        if (visited[(int)str[i]] == 1) return 0;
        visited[(int)str[i]] = 1;
    }
    return 1;
}

int main() {
    char str[100];
    scanf("%s", str);

    int maxLen = 0, len = strlen(str);

    for (int i = 0; i < len; i++) {
        for (int j = i; j < len; j++) {
            if (isUnique(str, i, j)) {
                if (j - i + 1 > maxLen)
                    maxLen = j - i + 1;
            }
        }
    }

    printf("%d\n", maxLen);
    return 0;
}

5.Write a code that counts how many palindromic substrings are present in a given string.

#include <stdio.h>
#include <string.h>

int isPalindrome(char *str, int start, int end) {
    while (start < end) {
        if (str[start] != str[end]) return 0;
        start++;
        end--;
    }
    return 1;
}

int main() {
    char str[100];
    scanf("%s", str);

    int count = 0, len = strlen(str);

    for (int i = 0; i < len; i++) {
        for (int j = i; j < len; j++) {
            if (isPalindrome(str, i, j)) {
                count++;
            }
        }
    }

    printf("%d\n", count);
    return 0;
}
